#!/usr/bin/env python

import os
import codecs
import re
import sys
import argparse
from lxml import etree
from iso639b_dict import iso639

def main(args=None):
    parser = argparse.ArgumentParser(
        description='oac_process takes an EAD file exported from ArchivesSpace and cleans it for upload to OAC')
    parser.add_argument(
        'file', nargs=1, help='file to process')
    if args is None:
        args = parser.parse_args()

    process(args.file[0])

def process(eadPath):
    xml = etree.parse(eadPath)
    ns = '{urn:isbn:1-931666-22-9}'
    parser = etree.XMLParser(resolve_entities=False, strip_cdata=False, remove_blank_text=True)
    xslFile = 'stylesheets/aspace_oac.xslt'
    isodict = iso639()
                
    #apply xslt (does the majority of processing)
    xslt = etree.parse(xslFile)
    transform = etree.XSLT(xslt)
    newXML = transform(xml)

    #lxml processing for things i couldn't figure out how to catch in xslt
    #strip num tag from titleproper
    numtag = newXML.find('//{0}titleproper/{0}num'.format(ns))
    if numtag is not None:
        titleproper = numtag.getparent()
        titleproper.remove(numtag)
        titleproper.text = titleproper.text.strip()

    #ISO markup for <langmaterial> element
    #example: <langmaterial>The collection is in <language langcode="eng">English</language>
    langmat = newXML.find('//{0}archdesc/{0}did/{0}langmaterial'.format(ns))
    for langname in isodict.keys():
        try:
            if langname in langmat.text:
                langmarkup = '<language langcode="' + isodict.get(langname) + '"\>' +  langname + '</language>'
                langmat.text = langmat.text.replace(langname, langmarkup, 1)
        except:
            pass
            # it would be good to have better error handling here

    #to string for regex operations
    newXML = str(newXML)
    ##remove the namespace declarations within elements
    newXML = re.sub(r'xmlns:xs="http:\/\/www\.w3\.org\/2001\/XMLSchema"\s+xmlns:ead="urn:isbn:1-931666-22-9"','',newXML)
    #lowercase "linear feet"
    newXML = re.sub(r'Linear\s+Feet','linear feet',newXML)
    #hacky angle bracket stuff for langmaterial
    #want to figure out how to do the markup more elegantly w/ lxml, should eliminate need for this
    newXML = newXML.replace('&lt;/','</')
    newXML = newXML.replace('&lt;','<')
    newXML = newXML.replace('\&gt;','>')
    newXML = newXML.replace('&gt;','>')

    #write out to file
    with codecs.open(eadPath, 'w', 'utf-8') as outfile:
        outfile.write(newXML)

    #normalize filenames generated by Aspace manual export
    #right now this assumes we're calling the file from the directory it's in
    aspaceFileRE = re.compile(r'([A-Za-z0-9\.]+)_[0-9]{8}_[0-9]{6}_UTC__ead\.xml')
    autonamed = aspaceFileRE.match(eadPath)
    if autonamed is not None:
        outpath = autonamed.group(1).lower().replace('.','') + '.xml'
        os.rename(eadPath,outpath)
    #leave other filenames alone
    else:
        outpath = eadPath   

    #print confirmation
    print(outpath,'processing completed')
    sys.stdout.flush()

# main() idiom
if __name__ == "__main__":
    sys.exit(main())